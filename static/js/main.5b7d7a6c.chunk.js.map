{"version":3,"sources":["Average.js","App.js","serviceWorker.js","index.js"],"names":["Average","useState","list","setList","number","setNumber","inputEl","useRef","onChange","useCallback","e","target","value","onInsert","nextList","concat","parseInt","current","focus","avg","useMemo","numbers","length","reduce","a","b","ref","onClick","map","index","key","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAoDeA,EA5CC,WAAO,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,OAEQF,mBAAS,IAFjB,mBAEbG,EAFa,KAELC,EAFK,KAGdC,EAAUC,iBAAO,MAEjBC,EAAWC,uBAAY,SAAAC,GAC3BL,EAAUK,EAAEC,OAAOC,SAClB,IAEGC,EAAWJ,uBAAY,WAC3B,IAAMK,EAAWZ,EAAKa,OAAOC,SAASZ,IACtCD,EAAQW,GACRT,EAAU,IACVC,EAAQW,QAAQC,UACf,CAACd,EAAQF,IAYNiB,EAAMC,mBAAQ,kBA/BG,KADNC,EAgCoBnB,GA/BzBoB,OAAqB,EACrBD,EAAQE,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAC5BJ,EAAQC,OAHJ,IAAAD,IAgC2B,CAACnB,IAE7C,OACE,6BACE,2BAAOU,MAAOR,EAAQI,SAAUA,EAAUkB,IAAKpB,IAC/C,4BAAQqB,QAASd,GAAjB,gBACA,4BACGX,EAAK0B,KAAI,SAAChB,EAAOiB,GAAR,OACR,wBAAIC,IAAKD,GAAQjB,OAGrB,6BACE,kDADF,IACeO,KCrCNY,E,iLAJX,OAAO,kBAAC,EAAD,U,GAFOC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5b7d7a6c.chunk.js","sourcesContent":["import React, { useState, useMemo, useCallback, useRef } from 'react';\r\n\r\nconst getAverage = numbers => {\r\n  if (numbers.length === 0) return 0; //없으면 0반환\r\n  const sum = numbers.reduce((a, b) => a + b);\r\n  return sum / numbers.length;\r\n};\r\n\r\nconst Average = () => {\r\n  const [list, setList] = useState([]);\r\n  const [number, setNumber] = useState('');\r\n  const inputEl = useRef(null);\r\n\r\n  const onChange = useCallback(e => {\r\n    setNumber(e.target.value);\r\n  }, []); //컴포넌트가 처음 렌더링될 때만 함수 생성\r\n\r\n  const onInsert = useCallback(() => {\r\n    const nextList = list.concat(parseInt(number));\r\n    setList(nextList);\r\n    setNumber('');\r\n    inputEl.current.focus();\r\n  }, [number, list]); // number혹은 list가 바뀌었을 때만 함수 생성\r\n\r\n  /* \r\n  const onInsert = e => {\r\n    const nextList = list.concat(parseInt(number));\r\n    setList(nextList);\r\n    setNumber('');\r\n  };\r\n  */\r\n  //useMemo를 이용 렌더링하는 과정에서 특정값이 바뀌었을때만 연산을 실행한다. 원하는 값이 바뀌지 않았다면 이전에 결과를 다시 사용한다\r\n  //input의 내용이 바뀔떄는 렌더링을 다시하지 않는다\r\n\r\n  const avg = useMemo(() => getAverage(list), [list]);\r\n\r\n  return (\r\n    <div>\r\n      <input value={number} onChange={onChange} ref={inputEl} />\r\n      <button onClick={onInsert}>등록</button>\r\n      <ul>\r\n        {list.map((value, index) => (\r\n          <li key={index}>{value}</li>\r\n        ))}\r\n      </ul>\r\n      <div>\r\n        <b>평균값:</b> {avg}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Average;\r\n","import React, { Component } from 'react';\nimport Average from './Average';\n\nclass App extends Component {\n  render() {\n    return <Average />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}